(()=>{globalThis.require=()=>(console.warn("Dummy require called."),{});globalThis.exports={};globalThis.module={exports:{}};document.addEventListener("DOMContentLoaded",()=>{if(console.log("DOM fully loaded. Setting up file input..."),typeof window.Buffer>"u"){console.error("Buffer is not defined."),document.getElementById("status").innerText="Error: Buffer polyfill did not load.";return}if(typeof window.PSD>"u"){console.error("PSD is not defined."),document.getElementById("status").innerText="Error: PSD library did not load.";return}console.log("Buffer and PSD are defined.");let{sepolia:d}=config,T=d.contractAddress,m=new ethers.providers.Web3Provider(window.ethereum),y=new ethers.Contract(T,config.abi,m),E=m.getSigner(),h=y.connect(E),B=document.getElementById("mintFeeDisplay");async function w(){try{let r=await y.mintFee();B.innerText=`Mint Fee: ${ethers.utils.formatEther(r)} ETH`}catch(r){B.innerText=`Mint Fee: Error fetching fee - ${r.message}`}}w();let v=document.getElementById("psdFile"),o=null,l=[];v.addEventListener("change",r=>{let t=r.target.files[0];if(!t){document.getElementById("status").innerText="No file selected.";return}console.log(`File selected: ${t.name}, size: ${t.size} bytes`),document.getElementById("status").innerText=`File chosen: ${t.name}`;let n=new FileReader;n.onprogress=i=>{if(i.lengthComputable){let e=(i.loaded/1048576).toFixed(2),a=(i.total/(1024*1024)).toFixed(2);console.log(`Reading file: ${e} / ${a} MB`),document.getElementById("status").innerText=`Reading file: ${e} / ${a} MB`}else console.log("onprogress fired, but length not computable."),document.getElementById("status").innerText="Reading file (unknown size)..."},n.onloadstart=()=>{console.log("File reading started."),document.getElementById("status").innerText="Starting file read..."},n.onerror=()=>{console.error("Error reading file."),document.getElementById("status").innerText="Error reading file."},n.onload=i=>{console.log("File reading complete. Parsing PSD..."),document.getElementById("status").innerText="File read complete. Parsing PSD...",window.PSD.fromArrayBuffer(i.target.result).then(e=>{e.parse(),console.log("Parsed PSD Layers:",e.tree().descendants()),o=F(e),D(o),document.getElementById("status").innerText="PSD parsed successfully. Ready to mint!";let a=document.getElementById("mintButton");a.disabled=!1,a.style.backgroundColor="#4CAF50"}).catch(e=>{console.error("Error parsing PSD:",e),document.getElementById("status").innerText="Error parsing PSD: "+e})},console.log("Initiating file read as ArrayBuffer..."),n.readAsArrayBuffer(t)});function F(r){let t=[],n=(i,e=[])=>{i.children()&&i.children().forEach(a=>{if(a.children())n(a,[...e,a.name()]);else{let u=e.length>0?e[e.length-1]:"Default",s=t.find(p=>p.name===u);s||(s={name:u,variants:[],specialLayers:[]},t.push(s));let g=/[~\/\|\{\}\[\]]+/,f=(a.name()?a.name().split(g).filter(p=>p):[""])[0]||"";f&&!s.specialLayers.includes(f)?s.variants.push({name:f,png:a.layer.image?a.layer.image.toBase64():null}):s.specialLayers.push(a.name()||"")}})};return n(r.tree()),l=t.map(i=>0),t}function D(r){let t=document.getElementById("traitSelection");t.innerHTML="",t.classList.remove("loading"),r.forEach((n,i)=>{if(n.variants.length>0){let e=document.createElement("div");e.className="trait-row",e.innerHTML=`
          <span class="trait-name">${n.name}</span>
          <span class="variant-name" id="variant-${i}">${n.variants[0].name}</span>
          <button onclick="changeVariant(${i}, -1)">\u2190</button>
          <button onclick="changeVariant(${i}, 1)">\u2192</button>
        `,t.appendChild(e)}else n.specialLayers.length>0&&n.specialLayers.forEach(e=>{let a=document.createElement("div");a.className="trait-row",a.innerHTML=`<span class="trait-name">Special Layer: ${e}</span>`,t.appendChild(a)})})}window.changeVariant=function(r,t){let n=o[r];l[r]=(l[r]+t+n.variants.length)%n.variants.length,document.getElementById(`variant-${r}`).innerText=n.variants[l[r]].name};let S=document.getElementById("mintButton");window.mintNFT=async function(){let r=document.getElementById("status");try{await m.send("eth_requestAccounts",[]);let t=o.length,n=o.map(c=>c.variants.length),i=l,e=await E.getAddress();r.innerText="Estimating gas...";let a=await h.estimateGas.mintNFT(e,initialHtmlUri,t,n,i,{value:ethers.utils.parseEther(d.mintFee)});r.innerText="Minting...";let g=(await(await h.mintNFT(e,initialHtmlUri,t,n,i,{value:ethers.utils.parseEther(d.mintFee),gasLimit:a.add(5e4)})).wait()).events.find(c=>c.event==="Transfer").args.tokenId.toString();r.innerText=`Minted! Token ID: ${g}`}catch(t){r.innerText=`Error: ${t.message}`}}});})();
